/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  query product(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product: product(handle: $handle) {\n      ...ProductFields\n      media(first: 20) {\n        nodes {\n          __typename\n          ... on MediaImage {\n            id\n            image {\n              altText\n              height\n              id\n              url\n              width\n            }\n            mediaContentType\n          }\n        }\n      }\n      variants(first: 250) {\n        nodes {\n          ...ProductVariantFields\n        }\n      }\n    }\n  }\n": types.ProductDocument,
    "\n  fragment ProductFields on Product {\n    handle\n    id\n    options {\n      name\n      values\n    }\n    title\n    vendor\n  }\n": types.ProductFieldsFragmentDoc,
    "\n  fragment ProductVariantFields on ProductVariant {\n    availableForSale\n    compareAtPriceV2 {\n      currencyCode\n      amount\n    }\n    id\n    image {\n      altText\n      height\n      id\n      url\n      width\n    }\n    priceV2 {\n      currencyCode\n      amount\n    }\n    selectedOptions {\n      name\n      value\n    }\n    title\n  }\n": types.ProductVariantFieldsFragmentDoc,
};

export function graphql(source: "\n  query product(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product: product(handle: $handle) {\n      ...ProductFields\n      media(first: 20) {\n        nodes {\n          __typename\n          ... on MediaImage {\n            id\n            image {\n              altText\n              height\n              id\n              url\n              width\n            }\n            mediaContentType\n          }\n        }\n      }\n      variants(first: 250) {\n        nodes {\n          ...ProductVariantFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query product(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product: product(handle: $handle) {\n      ...ProductFields\n      media(first: 20) {\n        nodes {\n          __typename\n          ... on MediaImage {\n            id\n            image {\n              altText\n              height\n              id\n              url\n              width\n            }\n            mediaContentType\n          }\n        }\n      }\n      variants(first: 250) {\n        nodes {\n          ...ProductVariantFields\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  fragment ProductFields on Product {\n    handle\n    id\n    options {\n      name\n      values\n    }\n    title\n    vendor\n  }\n"): (typeof documents)["\n  fragment ProductFields on Product {\n    handle\n    id\n    options {\n      name\n      values\n    }\n    title\n    vendor\n  }\n"];
export function graphql(source: "\n  fragment ProductVariantFields on ProductVariant {\n    availableForSale\n    compareAtPriceV2 {\n      currencyCode\n      amount\n    }\n    id\n    image {\n      altText\n      height\n      id\n      url\n      width\n    }\n    priceV2 {\n      currencyCode\n      amount\n    }\n    selectedOptions {\n      name\n      value\n    }\n    title\n  }\n"): (typeof documents)["\n  fragment ProductVariantFields on ProductVariant {\n    availableForSale\n    compareAtPriceV2 {\n      currencyCode\n      amount\n    }\n    id\n    image {\n      altText\n      height\n      id\n      url\n      width\n    }\n    priceV2 {\n      currencyCode\n      amount\n    }\n    selectedOptions {\n      name\n      value\n    }\n    title\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;